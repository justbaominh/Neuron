
This assignment replaces an exam for your final grade. It combines all aspects of the course.

First, let's get a unique image for everyone. Go to the following URL replacing the thest 'placeholder' in the URL with your student ID:

https://picsum.photos/seed/placeholder/300/400

                                           ---------------- > put your ID here instead of the text 'placeholder'

You should see an image; this image is unique to you. Everyone will have a different image. Right click on the image and save it. This image is in jpg format, but should be converted to bitmap (PPM in this case). Use this tool, or any image processing program of your choice:

https://onlineconvertfree.com/convert-format/jpg-to-ppm/

Now we have a bitmap image. This is essentially a header at the beginning of the file (with information on width, height, etc.) followed by the actual bytes representing the colors of each pixel. The header will look something like this:

P6
300 400
255

The first line is an identifier for the format, the second line is the width and height of the image, and lastly 255 is the maximum color value. In other words, the data that follows the header is image data with 3 colors (r,g,b) for each pixel in the image.

Example: a 4x4 image, 8 bit per component would look like this:

P6
4 4
255
 0  0  0    0  0  0    0  0  1    15  0 15
 0  0  0    0 255 10   0  0  0    20  0  0
 0  0  0    0  5  0    0 75  8     0  1  0
15  0 15    0  5  0    0  0  0   100  9  0
Of course, only the first three lines of the image are text (readable ASCII) should you open this in a text editor. The rest is binary data.

Now that we know that, you should make the following program.

We're going to try to build a system that can differentiate between your image and other images of the same size and type. We will do this by adapting the neuron program we have to consist of three neurons, each for colors (r,g,b) and train them. The first step is to take the average of all colors in the entire image and pass this color to the neurons. Record the results in a file ('how red/green/blue is the image'). Next, instead of the entire image, use 4 quadrants in the image (in other words, divide the image into 4 regions, each 150x200 pixels) and do the same as above, but per region. Finally, divide length and width by 4 (so each region becomes 75x100 pixels) and again do the same operation storing the results.

Once these are stored in a file, we can re-read them and store them in a struct and use them. Load in a different image (use a different seed when you generate, convert to PPM and pass through the neurons). Again store the results in a file, and read them back in to a struct. Now compare the two structs (be creative) to give a indication if this is your image or not, possibly as a percentage.

Make this program as complete as possible. For example you may want to implement a menu system where you can enter the path of the image to be loaded instead of hard coding this.

Some additional things you can do for higher grade:

- Indicate (e.g. drawing a cross) on the image where (in what section) the comparison image differs from the original, for example when modifying the original and saving the result.
- Remember you can print text in color

Useful:

- Online HEX editor to test setting pixels:
https://hexed.it/?hl=en

- Online PPM viewer:
http://paulcuth.me.uk/netpbm-viewer/
